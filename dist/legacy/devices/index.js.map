{"version":3,"sources":["../../../src/devices/index.js"],"names":["list","getOne","getFullStatus","getComponentStatus","getCapabilityStatus","executeCommand","request","require","rp","client","capability","url","devicesAccum","options","method","headers","qs","json","then","concat","response","items","_links","next","href","catch","err","console","log","deviceId","componentId","capabilityId","command","args","body","commands","component","arguments"],"mappings":"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","file":"index.js","sourcesContent":["const request = require('request')\r\nconst rp = require('request-promise')\r\n\r\n\r\n\r\n/**\r\n * Gets a list of devices\r\n *\r\n * @param {Object} client - Client object previously instantiated\r\n * @param {string} capability - The capability to filter by; if not specified,\r\n *  all devices will be returned.\r\n * @param {string} url - The URL to make the request to. Used to handle paging;\r\n *  calling clients should not need to specify this.\r\n * @param {Array} devicesAccum - An accumulator for recursive API calls to\r\n *  handle paged result sets. Calling clients should not need to specify this.\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\nexport function list(client, capability, url, devicesAccum) {\r\n    let options = {\r\n        method: 'GET',\r\n        url: url ? url : client.url + \"devices\",\r\n        headers: client.headers,\r\n        qs: capability ? {capability: capability} : {},\r\n        json: true\r\n    }\r\n    \r\n\r\n    return rp(options)\r\n    .then(response => {\r\n        if (!devicesAccum) {\r\n            devicesAccum = []\r\n        }\r\n        devicesAccum = devicesAccum.concat(response.items)\r\n        if (response._links.next) {\r\n            return list(options, capability, response._links.next.href, devicesAccum)\r\n        }\r\n        return devicesAccum\r\n    })\r\n    .catch(function(err) {\r\n        console.log(`Error getting devices: ${err}`)\r\n    })\r\n}\r\n\r\n/**\r\n * Gets a list of devices.\r\n *\r\n * @param {Object{}} client - Client object previously instantiated\r\n * @param {string} deviceId - The selected Device ID\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\nexport function getOne(client, deviceId) {\r\n    let options = {\r\n        method: 'GET',\r\n        url: client.url + \"devices/\"+deviceId,\r\n        headers: client.headers,\r\n        json: true\r\n    }\r\n\r\n    return rp(options)\r\n    .then(response => {\r\n        return response\r\n    })\r\n    .catch(function(err) {\r\n        console.log(`Error getting device: ${err}`)\r\n    })\r\n}\r\n\r\n\r\n/**\r\n * Get full status of a device.\r\n *\r\n * @param {Object{}} client - Client object previously instantiated\r\n * @param {string} deviceId - the selected Device ID\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\n\r\n export function getFullStatus(client, deviceId){\r\n    let options = {\r\n        method: 'GET',\r\n        url: client.url + \"devices/\"+deviceId+\"/status\",\r\n        headers: client.headers,\r\n        json: true\r\n    }\r\n\r\n    return rp(options)\r\n    .then(response => {\r\n        return response\r\n    })\r\n    .catch(function(err) {\r\n        console.log(`Error getting device status: ${err}`)\r\n    })\r\n }\r\n\r\n\r\n /**\r\n * Get component status of a device.\r\n *\r\n * @param {Object{}} client - Client object previously instantiated\r\n * @param {string} deviceId - the selected Device ID\r\n * @param {string} componentId - the slected component ID\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\n\r\nexport function getComponentStatus(client, deviceId, componentId){\r\n    let options = {\r\n        method: 'GET',\r\n        url: client.url + \"devices/\"+deviceId+\"/components/\"+componentId+\"/status\",\r\n        headers: client.headers,\r\n        json: true\r\n    }\r\n\r\n    return rp(options)\r\n    .then(response => {\r\n        return response\r\n    })\r\n    .catch(function(err) {\r\n        console.log(`Error getting device component status: ${err}`)\r\n    })\r\n }\r\n\r\n /**\r\n * Get capability status of a device.\r\n *\r\n * @param {Object{}} client - Client object previously instantiated\r\n * @param {string} deviceId - the selected Device ID\r\n * @param {string} componentId - the slected component ID\r\n * @param {string} capabilityId - the slected capbility ID\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\n\r\nexport function getCapabilityStatus(client, deviceId, componentId, capabilityId){\r\n    let options = {\r\n        method: 'GET',\r\n        url: client.url + \"devices/\"+deviceId+\"/components/\"+componentId+\"/capabilities/\"+capabilityId+\"/status\",\r\n        headers: client.headers,\r\n        json: true\r\n    }\r\n\r\n    return rp(options)\r\n    .then(response => {\r\n        return response\r\n    })\r\n    .catch(function(err) {\r\n        console.log(`Error getting device capability status: ${err}`)\r\n    })\r\n }\r\n\r\n\r\n /**\r\n * Execute Commands on a device.\r\n *\r\n * @param {Object{}} client - Client object previously instantiated\r\n * @param {string} deviceId - the selected Device ID\r\n * @param {string} componentId - the slected component ID\r\n * @param {string} capabilityId - the slected capbility ID\r\n * @param {string} command - the slected command\r\n * @param {Array} args - The command arguments\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\n\r\nexport function executeCommand(client, deviceId, componentId, capabilityId, command, args){\r\n    let body = {\r\n        commands: [\r\n            {\r\n                component: componentId,\r\n                capability: capabilityId,\r\n                command: command,\r\n                arguments: args\r\n            }\r\n        ]\r\n    }\r\n    \r\n    let options = {\r\n        method: 'POST',\r\n        url: client.url + \"devices/\"+deviceId+\"/commands\",\r\n        headers: client.headers,\r\n        body: body,\r\n        json: true\r\n    }\r\n\r\n\r\n\r\n    return rp(options)\r\n    .then(response => {\r\n      return response\r\n    })\r\n    .catch(function(err) {\r\n        console.log(`Error executing command: ${err}`)\r\n    })\r\n }\r\n\r\n"]}