{"version":3,"sources":["../../../src/locations/index.js"],"names":["list","show","request","require","rp","client","url","locationsAccum","options","method","headers","json","then","concat","response","items","_links","getLocations","next","href","catch","err","console","log","locationId"],"mappings":";;;;;;;;;;QAgBgBA,I,GAAAA,I;QAgCAC,I,GAAAA,I;;;;AAhDhB,IAAMC,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,KAAKD,QAAQ,iBAAR,CAAX;;AAeO,SAASH,IAAT,CAAcK,MAAd,EAAsBC,GAAtB,EAA2BC,cAA3B,EAA2C;AAAA;;AAC9C,QAAIC,UAAU;AACVC,gBAAQ,KADE;AAEVH,aAAKD,OAAOC,GAAP,GAAa,WAFR;AAGVI,iBAASL,OAAOK,OAHN;AAIVC,cAAM;AAJI,KAAd;;AAQA,WAAOP,GAAGI,OAAH,EACNI,IADM,CACD,oBAAY;AAAA;;AACd,YAAI,CAACL,cAAL,EAAqB;AACjBA,6BAAiB,EAAjB;AACH;AACDA,yBAAiBA,eAAeM,MAAf,CAAsBC,SAASC,KAA/B,CAAjB;AACA,YAAID,SAASE,MAAb,EAAqB;AACjB,mBAAOC,aAAaT,OAAb,EAAsBM,SAASE,MAAT,CAAgBE,IAAhB,CAAqBC,IAA3C,EAAiDZ,cAAjD,CAAP;AACH;AACD,eAAOA,cAAP;AACC,KAVE,aAWFa,KAXE,CAWI,UAASC,GAAT,EAAc;AACrBC,gBAAQC,GAAR,sCAAwCF,GAAxC;AACH,KAbM,CAAP;AAcH;;AASM,SAASpB,IAAT,CAAcI,MAAd,EAAsBmB,UAAtB,EAAkC;AACrC,QAAIhB,UAAU;AACVC,gBAAQ,KADE;AAEVH,aAAKD,OAAOC,GAAP,GAAa,YAAb,GAA0BkB,UAFrB;AAGVd,iBAASL,OAAOK,OAHN;AAIVC,cAAM;AAJI,KAAd;;AAOA,WAAOP,GAAGI,OAAH,CAAP;AACH","file":"index.js","sourcesContent":["const request = require('request')\r\nconst rp = require('request-promise')\r\n\r\n\r\n/**\r\n * Gets a list of locations.\r\n *\r\n * @param {Object} client - Client object previously instantiated\r\n * @param {string} capability - The capability to filter by; if not specified,\r\n *  all locations will be returned.\r\n * @param {string} url - The URL to make the request to. Used to handle paging;\r\n *  calling clients should not need to specify this.\r\n * @param {Array} locationsAccum - An accumulator for recursive API calls to\r\n *  handle paged result sets. Calling clients should not need to specify this.\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\nexport function list(client, url, locationsAccum) {\r\n    let options = {\r\n        method: 'GET',\r\n        url: client.url + \"locations\",\r\n        headers: client.headers,\r\n        json: true\r\n    }\r\n    \r\n\r\n    return rp(options)\r\n    .then(response => {\r\n        if (!locationsAccum) {\r\n            locationsAccum = []\r\n        }\r\n        locationsAccum = locationsAccum.concat(response.items)\r\n        if (response._links) {\r\n            return getLocations(options, response._links.next.href, locationsAccum)\r\n        }\r\n        return locationsAccum\r\n        })\r\n        .catch(function(err) {\r\n        console.log(`Error getting locations: ${err}`)\r\n    })\r\n}\r\n\r\n/**\r\n * Gets a list of locations.\r\n *\r\n * @param {Object{}} client - Client object previously instantiated\r\n * @param {string} locationId - The selected Location ID\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\nexport function show(client, locationId) {\r\n    let options = {\r\n        method: 'GET',\r\n        url: client.url + \"locations/\"+locationId,\r\n        headers: client.headers,\r\n        json: true\r\n    }\r\n\r\n    return rp(options)\r\n}\r\n\r\n"]}