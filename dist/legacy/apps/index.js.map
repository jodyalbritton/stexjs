{"version":3,"sources":["../../../src/apps/index.js"],"names":["list","show","createWebhookApp","request","require","rp","client","url","appsAccum","options","method","headers","json","then","concat","response","items","_links","next","href","catch","err","console","log","appId","appName","displayName","description","singleInstance","targetUrl","body","appType","webhookSmartApp"],"mappings":";;;;;;;;;;QAgBgBA,I,GAAAA,I;QAkCAC,I,GAAAA,I;QAwBAC,gB,GAAAA,gB;;;;AA1EhB,IAAMC,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,KAAKD,QAAQ,iBAAR,CAAX;;AAeO,SAASJ,IAAT,CAAcM,MAAd,EAAsBC,GAAtB,EAA2BC,SAA3B,EAAsC;AAAA;;AACzC,QAAIC,UAAU;AACVC,gBAAQ,KADE;AAEVH,aAAKD,OAAOC,GAAP,GAAa,MAFR;AAGVI,iBAASL,OAAOK,OAHN;AAIVC,cAAM;AAJI,KAAd;;AAQA,WAAOP,GAAGI,OAAH,EACNI,IADM,CACD,oBAAY;AAAA;;AACd,YAAI,CAACL,SAAL,EAAgB;AACZA,wBAAY,EAAZ;AACH;AACDA,oBAAYA,UAAUM,MAAV,CAAiBC,SAASC,KAA1B,CAAZ;AACA,YAAID,SAASE,MAAT,CAAgBC,IAApB,EAA0B;AACtB,mBAAOlB,KAAKS,OAAL,EAAcM,SAASE,MAAT,CAAgBC,IAAhB,CAAqBC,IAAnC,EAAyCX,SAAzC,CAAP;AACH;AACD,eAAOA,SAAP;AACC,KAVE,aAWFY,KAXE,CAWI,UAASC,GAAT,EAAc;AACrBC,gBAAQC,GAAR,iCAAmCF,GAAnC;AACH,KAbM,CAAP;AAcH;;AAWM,SAASpB,IAAT,CAAcK,MAAd,EAAsBkB,KAAtB,EAA6B;AAChC,QAAIf,UAAU;AACVC,gBAAQ,KADE;AAEVH,aAAKD,OAAOC,GAAP,GAAa,OAAb,GAAqBiB,KAFhB;AAGVb,iBAASL,OAAOK,OAHN;AAIVC,cAAM;AAJI,KAAd;;AAOA,WAAOP,GAAGI,OAAH,CAAP;AACH;;AAeM,SAASP,gBAAT,CAA0BI,MAA1B,EAAkCmB,OAAlC,EAA2CC,WAA3C,EAAwDC,WAAxD,EAAqEC,cAArE,EAAqFC,SAArF,EAAgG;AAAA;;AACnG,QAAIC,OAAO;AACPL,iBAASA,OADF;AAEPC,qBAAaA,WAFN;AAGPC,qBAAaA,WAHN;AAIPC,wBAAgBA,cAJT;AAKPG,iBAAS,mBALF;AAMPC,yBAAiB;AACbH;AADa;AANV,KAAX;;AAWA,QAAIpB,UAAU;AACVC,gBAAQ,MADE;AAEVH,aAAKD,OAAOC,GAAP,GAAa,MAFR;AAGVI,iBAASL,OAAOK,OAHN;AAIVmB,cAAMA,IAJI;AAKVlB,cAAM;AALI,KAAd;;AAQA,WAAOP,GAAGI,OAAH,EACNI,IADM,CACD,oBAAY;AAAA;;AAChB,eAAOE,QAAP;AACD,KAHM,aAINK,KAJM,CAIA,UAASC,GAAT,EAAc;AACjBC,gBAAQC,GAAR,mCAAqCF,GAArC;AACH,KANM,CAAP;AAOH","file":"index.js","sourcesContent":["const request = require('request')\r\nconst rp = require('request-promise')\r\n\r\n\r\n\r\n/**\r\n * Gets a list of apps.\r\n *\r\n * @param {Object} client - Client object previously instantiated\r\n * \r\n * @param {string} url - The URL to make the request to. Used to handle paging;\r\n *  calling clients should not need to specify this.\r\n * @param {Array} appsAccum - An accumulator for recursive API calls to\r\n *  handle paged result sets. Calling clients should not need to specify this.\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\nexport function list(client, url, appsAccum) {\r\n    let options = {\r\n        method: 'GET',\r\n        url: client.url + \"apps\",\r\n        headers: client.headers,\r\n        json: true\r\n    }\r\n    \r\n\r\n    return rp(options)\r\n    .then(response => {\r\n        if (!appsAccum) {\r\n            appsAccum = []\r\n        }\r\n        appsAccum = appsAccum.concat(response.items)\r\n        if (response._links.next) {\r\n            return list(options, response._links.next.href, appsAccum)\r\n        }\r\n        return appsAccum\r\n        })\r\n        .catch(function(err) {\r\n        console.log(`Error getting apps: ${err}`)\r\n    })\r\n}\r\n\r\n\r\n\r\n/**\r\n * Gets one apps.\r\n *\r\n * @param {Object{}} client - Client object previously instantiated\r\n * @param {string} appId - The selected App ID\r\n * @returns {Object} - The request-promise for this API request.\r\n */\r\nexport function show(client, appId) {\r\n    let options = {\r\n        method: 'GET',\r\n        url: client.url + \"apps/\"+appId,\r\n        headers: client.headers,\r\n        json: true\r\n    }\r\n\r\n    return rp(options)\r\n}\r\n\r\n\r\n/**\r\n * Create a webhook smartapp\r\n * \r\n * @param {Object{}} client - Client object previously instantiated \r\n * @param {string} appName - A globally unique, developer-defined identifier for an app.\r\n * @param {string} displayName - A default display name for an app.\r\n * @param {string} description - A default description for an app.\r\n * @param {boolean} singleInstance - Inform the installation systems that a particular app can only be installed once within a user's account.\r\n * @param {string} targetUrl - The callback url for the app\r\n*/\r\n\r\n\r\nexport function createWebhookApp(client, appName, displayName, description, singleInstance, targetUrl) {\r\n    let body = {\r\n        appName: appName, \r\n        displayName: displayName,\r\n        description: description,\r\n        singleInstance: singleInstance,\r\n        appType: \"WEBHOOK_SMART_APP\",\r\n        webhookSmartApp: {\r\n            targetUrl\r\n        }\r\n    }\r\n    \r\n    let options = {\r\n        method: 'POST',\r\n        url: client.url + \"apps\",\r\n        headers: client.headers,\r\n        body: body,\r\n        json: true\r\n    }\r\n\r\n    return rp(options)\r\n    .then(response => {\r\n      return response\r\n    })\r\n    .catch(function(err) {\r\n        console.log(`Error installing app: ${err}`)\r\n    })\r\n}\r\n\r\n"]}