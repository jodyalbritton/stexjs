{"version":3,"sources":["../../../src/installedapps/index.js"],"names":["list","show","request","require","rp","client","url","appsAccum","options","method","headers","json","then","concat","response","items","_links","next","href","catch","err","console","log","appId"],"mappings":";;;;;;;;;;QAegBA,I,GAAAA,I;QAiCAC,I,GAAAA,I;;;;AAhDhB,IAAMC,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,KAAKD,QAAQ,iBAAR,CAAX;;AAcO,SAASH,IAAT,CAAcK,MAAd,EAAsBC,GAAtB,EAA2BC,SAA3B,EAAsC;AAAA;;AACzC,QAAIC,UAAU;AACVC,gBAAQ,KADE;AAEVH,aAAKD,OAAOC,GAAP,GAAa,eAFR;AAGVI,iBAASL,OAAOK,OAHN;AAIVC,cAAM;AAJI,KAAd;;AAQA,WAAOP,GAAGI,OAAH,EACNI,IADM,CACD,oBAAY;AAAA;;AACd,YAAI,CAACL,SAAL,EAAgB;AACZA,wBAAY,EAAZ;AACH;AACDA,oBAAYA,UAAUM,MAAV,CAAiBC,SAASC,KAA1B,CAAZ;AACA,YAAID,SAASE,MAAT,CAAgBC,IAApB,EAA0B;AACtB,mBAAOjB,KAAKQ,OAAL,EAAcM,SAASE,MAAT,CAAgBC,IAAhB,CAAqBC,IAAnC,EAAyCX,SAAzC,CAAP;AACH;AACD,eAAOA,SAAP;AACC,KAVE,aAWFY,KAXE,CAWI,UAASC,GAAT,EAAc;AACrBC,gBAAQC,GAAR,iCAAmCF,GAAnC;AACH,KAbM,CAAP;AAcH;;AAUM,SAASnB,IAAT,CAAcI,MAAd,EAAsBkB,KAAtB,EAA6B;AAChC,QAAIf,UAAU;AACVC,gBAAQ,KADE;AAEVH,aAAKD,OAAOC,GAAP,GAAa,gBAAb,GAA8BiB,KAFzB;AAGVb,iBAASL,OAAOK,OAHN;AAIVC,cAAM;AAJI,KAAd;;AAOA,WAAOP,GAAGI,OAAH,CAAP;AACH","file":"index.js","sourcesContent":["const request = require('request')\nconst rp = require('request-promise')\n\n\n/**\n * Gets a list of installed apps.\n *\n * @param {Object} client - Client object previously instantiated\n * \n * @param {string} url - The URL to make the request to. Used to handle paging;\n *  calling clients should not need to specify this.\n * @param {Array} appsAccum - An accumulator for recursive API calls to\n *  handle paged result sets. Calling clients should not need to specify this.\n * @returns {Object} - The request-promise for this API request.\n */\nexport function list(client, url, appsAccum) {\n    let options = {\n        method: 'GET',\n        url: client.url + \"installedapps\",\n        headers: client.headers,\n        json: true\n    }\n    \n\n    return rp(options)\n    .then(response => {\n        if (!appsAccum) {\n            appsAccum = []\n        }\n        appsAccum = appsAccum.concat(response.items)\n        if (response._links.next) {\n            return list(options, response._links.next.href, appsAccum)\n        }\n        return appsAccum\n        })\n        .catch(function(err) {\n        console.log(`Error getting apps: ${err}`)\n    })\n}\n\n\n/**\n * Gets one installed.\n *\n * @param {Object{}} client - Client object previously instantiated\n * @param {string} appId - The selected App ID\n * @returns {Object} - The request-promise for this API request.\n */\nexport function show(client, appId) {\n    let options = {\n        method: 'GET',\n        url: client.url + \"installedapps/\"+appId,\n        headers: client.headers,\n        json: true\n    }\n\n    return rp(options)\n}"]}