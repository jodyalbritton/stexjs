{"version":3,"sources":["../../src/index.js"],"names":["devices","apps","locations","installedApps","subcriptions","StexClient","access_token","url","headers","client","locationsAccum","list","locationId","show","capability","devicesAccum","deviceId","getOne","getFullStatus","component","getComponentStatus","componentId","capabilityId","getCapabilityStatus","command","args","executeCommand","appsAccum","appId","attribute","value","stateChangeOnly","subscriptionName","createDeviceSubscription","deleteAppSubscriptions"],"mappings":";;;;;;;;;;;;;;;AAAA;;IAAYA,O;;AACZ;;IAAYC,I;;AACZ;;IAAYC,S;;AACZ;;IAAYC,a;;AACZ;;IAAYC,Y;;;;;;IAECC,U,WAAAA,U;AACT,wBAAYC,YAAZ,EAA0B;AAAA;;AACtB,aAAKA,YAAL,GAAoBA,YAApB;AACA,aAAKC,GAAL,GAAW,iCAAX;AACA,aAAKC,OAAL,GAAe;AACX,6BAAkB,YAAWF,YADlB;AAEX,4BAAiB;AAFN,SAAf;AAIH;;;;sCAiBaG,M,EAAQC,c,EAAgB;AAClC,mBAAOR,UAAUS,IAAV,CAAeF,MAAf,EAAuBC,cAAvB,CAAP;AACH;;;qCAUYD,M,EAAQG,U,EAAY;AAC7B,mBAAOV,UAAUW,IAAV,CAAeJ,MAAf,EAAuBG,UAAvB,CAAP;AACH;;;oCAkBWH,M,EAAQK,U,EAAWC,Y,EAAc;AACzC,mBAAOf,QAAQW,IAAR,CAAaF,MAAb,EAAqBK,UAArB,EAAgCC,YAAhC,CAAP;AACH;;;mCAUUN,M,EAAQO,Q,EAAU;AACzB,mBAAOhB,QAAQiB,MAAR,CAAeR,MAAf,EAAuBO,QAAvB,CAAP;AACH;;;6CAUoBP,M,EAAQO,Q,EAAU;AACnC,mBAAOhB,QAAQkB,aAAR,CAAsBT,MAAtB,EAA8BO,QAA9B,CAAP;AACH;;;kDAYyBP,M,EAAQO,Q,EAAUG,S,EAAW;AACnD,mBAAOnB,QAAQoB,kBAAR,CAA2BX,MAA3B,EAAmCO,QAAnC,EAA6CG,SAA7C,CAAP;AACH;;;mDAc0BV,M,EAAQO,Q,EAAUK,W,EAAaC,Y,EAAc;AACpE,mBAAOtB,QAAQuB,mBAAR,CAA4Bd,MAA5B,EAAoCO,QAApC,EAA8CK,WAA9C,EAA2DC,YAA3D,CAAP;AACH;;;8CAkBqBb,M,EAAQO,Q,EAAUK,W,EAAaC,Y,EAAcE,O,EAASC,I,EAAM;AAC9E,mBAAOzB,QAAQ0B,cAAR,CAAuBjB,MAAvB,EAA+BO,QAA/B,EAAyCK,WAAzC,EAAsDC,YAAtD,EAAoEE,OAApE,EAA6EC,IAA7E,CAAP;AACH;;;iCAgBQhB,M,EAAQkB,S,EAAW;AACxB,mBAAO1B,KAAKU,IAAL,CAAUF,MAAV,EAAkBkB,SAAlB,CAAP;AACH;;;gCAUOlB,M,EAAQmB,K,EAAO;AACnB,mBAAO3B,KAAKY,IAAL,CAAUJ,MAAV,EAAkBmB,KAAlB,CAAP;AACH;;;iDAUGnB,M,EACAmB,K,EACAZ,Q,EACAK,W,EACAP,U,EACAe,S,EACAC,K,EACAC,e,EACAC,gB,EAAiB;;AAEjB,mBACQ5B,aAAa6B,wBAAb,CACIxB,MADJ,EAEImB,KAFJ,EAGIZ,QAHJ,EAIIK,WAJJ,EAKIP,UALJ,EAMIe,SANJ,EAOIC,KAPJ,EAQIC,eARJ,EASIC,gBATJ,CADR;AAaC;;;8CAEiBvB,M,EAAQmB,K,EAAO;AACjC,mBAAOxB,aAAa8B,sBAAb,CAAoCzB,MAApC,EAA2CmB,KAA3C,CAAP;AACH","file":"index.js","sourcesContent":["import * as devices from './devices'\nimport * as apps from './apps'\nimport * as locations from './locations'\nimport * as installedApps from './installedapps'\nimport * as subcriptions from './subscriptions'\n\nexport class StexClient {\n    constructor(access_token) {\n        this.access_token = access_token\n        this.url = 'https://api.smartthings.com/v1/'\n        this.headers = {\n            'Authorization' : 'Bearer '+ access_token,\n            'Content-type' : 'application/json'\n        }\n    }\n\n    \n     /**\n     * Locations\n     */\n    \n    /**\n     * Gets a list of locations.\n     * @param {Object} client - Client object\n     * @param {string} capability - The capability to filter by; if not specified,\n     *  all locations will be returned.\n     * @param {Array} locationsAccum - An accumulator for recursive API calls to\n     *  handle paged result sets. Calling clients should not need to specify this.\n     * \n     * @returns {Object} - The request-promise for this API request.\n     */\n    listLocations(client, locationsAccum) {\n        return locations.list(client, locationsAccum)\n    }\n\n    \n    /**\n     * Returns a request-promise for the status of the specified locationId.\n     *\n     * @param {string} deviceId - The ID of the location.\n     *\n     * @returns {Object} - The request-promise for this API call.\n     */\n    showLocation(client, locationId) {\n        return locations.show(client, locationId)\n    }\n\n\n    /**\n     * DEVICES\n     */\n    \n    /**\n     * Gets a list of devices.\n     *\n     * @param {string} capability - The capability to filter by; if not specified,\n     *  all devices will be returned.\n     * @param {Array} devicesAccum - An accumulator for recursive API calls to\n     *  handle paged result sets. Calling clients should not need to specify this.\n     * @returns {Object} - The request-promise for this API request.\n     */\n\n\n    listDevices(client, capability,devicesAccum) {\n        return devices.list(client, capability,devicesAccum)\n    }\n\n    \n    /**\n     * Returns a request-promise for the object of the specified deviceId.\n     *\n     * @param {string} deviceId - The ID of the device.\n     *\n     * @returns {Object} - The request-promise for this API call.\n     */\n    showDevice(client, deviceId) {\n        return devices.getOne(client, deviceId)\n    }\n\n\n    /**\n     * Returns a request-promise for the status of the specified deviceId.\n     *\n     * @param {string} deviceId - The ID of the device.\n     *\n     * @returns {Object} - The request-promise for this API call.\n     */\n    showDeviceFullStatus(client, deviceId) {\n        return devices.getFullStatus(client, deviceId)\n    }\n\n\n    /**\n     * Returns a request-promise for the status of the specified deviceId.\n     *\n     * @param {string} deviceId - The ID of the device.\n     * \n     * @param {string} componentId - The ID of the component \n     *\n     * @returns {Object} - The request-promise for this API call.\n     */\n    showDeviceComponentStatus(client, deviceId, component) {\n        return devices.getComponentStatus(client, deviceId, component)\n    }\n\n\n    /**\n     * Returns a request-promise for the status of the specified deviceId.\n     *\n     * @param {string} deviceId - The ID of the device.\n     * \n     * @param {string} componentId - The ID of the component \n     * \n     * @param {string} capabilityId - The ID of the capability \n     *\n     * @returns {Object} - The request-promise for this API call.\n     */\n    showDeviceCapabilityStatus(client, deviceId, componentId, capabilityId) {\n        return devices.getCapabilityStatus(client, deviceId, componentId, capabilityId)\n    }\n\n\n    /**\n     * Returns a request-promise for the status of the specified deviceId.\n     *\n     * @param {string} deviceId - The ID of the device.\n     * \n     * @param {string} componentId - The ID of the component \n     * \n     * @param {string} capabilityId - The ID of the capability \n     * \n     * @param {string} command - the command\n     * \n     * @param {Array} args - the command arguments\n     *\n     * @returns {Object} - The request-promise for this API call.\n     */\n    executeDeviceCommands(client, deviceId, componentId, capabilityId, command, args) {\n        return devices.executeCommand(client, deviceId, componentId, capabilityId, command, args)\n    }\n\n\n    /**\n     * Apps\n     */\n\n    /**\n     * Gets a list of apps.\n     * @param {Object} client - Client object\n     *  all apps will be returned.\n     * @param {Array} appsAccum - An accumulator for recursive API calls to\n     *  handle paged result sets. Calling clients should not need to specify this.\n     * \n     * @returns {Object} - The request-promise for this API request.\n     */\n    listApps(client, appsAccum) {\n        return apps.list(client, appsAccum)\n    }\n\n    \n    /**\n     * Returns a request-promise for the status of the specified appId.\n     *\n     * @param {string} appsId - The ID of the app.\n     *\n     * @returns {Object} - The request-promise for this API call.\n     */\n    showApp(client, appId) {\n        return apps.show(client, appId)\n    }\n\n\n\n    /**\n    * Subcriptions\n    */\n\n\n    createDeviceSubscription(\n        client, \n        appId, \n        deviceId, \n        componentId, \n        capability, \n        attribute, \n        value, \n        stateChangeOnly, \n        subscriptionName){\n            \n        return(\n                subcriptions.createDeviceSubscription(\n                    client, \n                    appId, \n                    deviceId, \n                    componentId, \n                    capability, \n                    attribute, \n                    value, \n                    stateChangeOnly, \n                    subscriptionName\n                )\n            )\n        }    \n    \n    deleteAppSubcriptions(client, appId) {\n        return(subcriptions.deleteAppSubscriptions(client,appId))\n    }\n}\n"]}